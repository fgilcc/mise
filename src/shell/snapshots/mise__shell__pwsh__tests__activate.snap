---
source: src/shell/pwsh.rs
assertion_line: 192
expression: pwsh.activate(opts)
snapshot_kind: text
---
$env:MISE_SHELL = 'pwsh'
$env:__MISE_ORIG_PATH = $env:PATH

function mise {

    $code = [System.Management.Automation.Language.Parser]::ParseInput($MyInvocation.Statement.Substring($MyInvocation.OffsetInLine - 1), [ref]$null, [ref]$null)
    $myLine = $code.Find({ $args[0].CommandElements }, $true).CommandElements | ForEach-Object { $_.ToString() } | Join-String -Separator ' '
    $command, [array]$arguments = Invoke-Expression ('Write-Output -- ' + $myLine)
    
    if ($null -eq $arguments) { 
        & /some/dir/mise
        return
    } 

    $command = $arguments[0]
    $arguments = $arguments[1..$arguments.Length]

    if ($arguments -contains '--help') {
        return & /some/dir/mise $command $arguments 
    }

    switch ($command) {
        { $_ -in 'deactivate', 'shell', 'sh' } {
            if ($arguments -contains '-h' -or $arguments -contains '--help') {
                & /some/dir/mise $command $arguments
            }
            else {
                & /some/dir/mise $command $arguments | Out-String | Invoke-Expression -ErrorAction SilentlyContinue
            }
        }
        default {
            & /some/dir/mise $command $arguments
            $status = $LASTEXITCODE
            if ($(Test-Path -Path Function:\_mise_hook)){
                _mise_hook
            }
            pwsh -NoProfile -Command exit $status #Pass down exit code from mise after _mise_hook
        }
    }
}

function _mise_hook {
    if ($env:MISE_SHELL -eq "pwsh"){
        & /some/dir/mise hook-env --status -s pwsh | Out-String | Invoke-Expression -ErrorAction SilentlyContinue
    }
}

if (-not $__mise_pwsh_previous_chpwd_function){
    $_mise_chpwd_hook = [EventHandler[System.Management.Automation.LocationChangedEventArgs]] {
        param([object] $source, [System.Management.Automation.LocationChangedEventArgs] $eventArgs)
        end {
            _mise_hook
        }
    };
    $Global:__mise_pwsh_previous_chpwd_function=$ExecutionContext.SessionState.InvokeCommand.LocationChangedAction;

    if ($__mise_original_pwsh_chpwd_function) {
        $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction = [Delegate]::Combine($__mise_pwsh_previous_chpwd_function, $_mise_chpwd_hook)
    }
    else {
        $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction = $_mise_chpwd_hook
    }
}

if (-not $__mise_pwsh_previous_prompt_function){
    $global:__mise_pwsh_previous_prompt_function=$function:prompt
    function global:prompt {
        if (Test-Path -Path Function:\_mise_hook){
            _mise_hook
        }
        & $__mise_pwsh_previous_prompt_function
    }
}

_mise_hook
