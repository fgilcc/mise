---
source: src/shell/pwsh.rs
assertion_line: 164
expression: "pwsh.activate(exe, \" --status\".into())"
snapshot_kind: text
---
$env:MISE_SHELL = "pwsh"
$env:__MISE_ORIG_PATH = $env:PATH

function mise {

    $code = [System.Management.Automation.Language.Parser]::ParseInput($MyInvocation.Line.Substring($MyInvocation.OffsetInLine - 1), [ref]$null, [ref]$null)
    $myLine = $code.Find({ $args[0].CommandElements }, $true).CommandElements | ForEach-Object { $_.ToString() } | Join-String -Separator ' '
    $command, [array]$arguments = Invoke-Expression ('Write-Output -- ' + $myLine)
    if ($null -eq $arguments) { $arguments = @() } 


    if ($arguments.Lenght -eq 0) {
        & /some/dir/mise
        return
    }

    $command = $arguments[0]
    $arguments = $arguments[1..$arguments.Length]

    if ($arguments -contains "--help") {
        return & /some/dir/mise $command $arguments 
    }

    switch ($command) {
        { $_ -in "deactivate", "shell", "sh" } {
            if ($arguments -contains "-h" -or $arguments -contains "--help") {
                & /some/dir/mise $command $arguments
            }
            else {
                & /some/dir/mise $command $arguments | Out-String | Invoke-Expression -ErrorAction SilentlyContinue
            }
        }
        default {
            & /some/dir/mise $command $arguments
        }
    }
}

function _mise_hook {
    & /some/dir/mise hook-env --status -s pwsh | Out-String | Invoke-Expression -ErrorAction SilentlyContinue
}

if (-not $__mise_pwsh_original_chpwd_function){
    $Global:__mise_pwsh_original_chpwd_function=$ExecutionContext.SessionState.InvokeCommand.LocationChangedAction;

    if ($__mise_original_pwsh_chpwd_function) {
        $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction = [Delegate]::Combine($__mise_pwsh_original_chpwd_function, {_mise_hook})
    }
    else {
        $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction = {_mise_hook}
    }
}

_mise_hook
